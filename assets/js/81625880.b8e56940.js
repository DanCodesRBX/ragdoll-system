"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[599],{25420:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a ragdoll from a model that satisfies any of its blueprints. Returns nil if no blueprint is satisfied.","params":[{"name":"model","desc":"","lua_type":"Model"},{"name":"blueprint","desc":"","lua_type":"Blueprint?"}],"returns":[{"desc":"","lua_type":"Ragdoll?\\n"}],"function_type":"static","source":{"line":40,"path":"lib/RagdollFactory/init.lua"}},{"name":"addBlueprint","desc":"Adds a blueprint to the factory. Retroactively updates all existing ragdolls to this type of ragdoll if they satisfy its requirements.","params":[{"name":"blueprint","desc":"","lua_type":"Blueprint"}],"returns":[],"function_type":"static","source":{"line":60,"path":"lib/RagdollFactory/init.lua"}}],"properties":[{"name":"RagdollConstructed","desc":"Fires when a ragdoll is constructed by the factory.","lua_type":"Signal","readonly":true,"source":{"line":24,"path":"lib/RagdollFactory/init.lua"}}],"types":[],"name":"RagdollFactory","desc":"","source":{"line":11,"path":"lib/RagdollFactory/init.lua"}}')}}]);